function myFunction(x) {
    x.classList.toggle("open");
  }


  
/////////////////////////////////////////////////////////* When the user clicks on the button,toggle between hiding and showing the dropdown content */
function DropDown() {
  document.getElementById("myDropdown").classList.toggle("show");
}

// Close the dropdown menu if the user clicks outside of it

/////////////////////////////////////////////////////////////


function Mohammed(){
  document.getElementById('midlle_col').innerHTML=`<h1> Not god but Allah</h1>`
}

//////////////////////////////////////////

window.onclick = function(event) {
  if (!event.target.matches('.dropbtn')) {
    let dropdowns = document.getElementsByClassName("dropdown-content");
    let i;
    for (i = 0; i < dropdowns.length; i++) {
     let openDropdown = dropdowns[i];
      if (openDropdown.classList.contains('show')) {
        openDropdown.classList.remove('show');
      }
    }
  }
}

////////////////////////////////////

function Mygirl(){
  const element=document.getElementById('midlle_col');
element.innerHTML=`<h1> I am from mobile menu ----------------------------</h1>`
}
////////////////////////// Лаб 1................................./////////////////////////////////////////////////
function Lab1(){
  var cssId = 'myCss';  // you could encode the css path itself to generate id..
if (!document.getElementById(cssId))
{
    var head  = document.getElementsByTagName('head')[0];
    var link  = document.createElement('link');
    link.id   = cssId;
    link.rel  = 'stylesheet';
    link.type = 'text/css';
    link.href = 'tom.css';
    link.media = 'all';
    head.appendChild(link);
}

  const element=document.getElementById('midlle_col');
element.innerHTML=`<div lang='Rus'> 

      <h2>Лабораторная работа - 1 </h2>
<h3>Операции над матрицами и векторами в системе MATLAB</h2>

<h4>Цель работы: Изучение основных операций c векторами и матрицами в системе MATLAB</h3>
<ul id="main_ul">
<li> <h5>Основные положения</h5> </li>

 <p> В MATLAB создание вектора или матрицы является достаточно простой задачей. При вводе значения векторов и матриц перечисляются в квадратных скобках. 
    Для разделения столбцов используются пробелы, для разделения строк – знак «;».
    <ul class="simple">
        <h5>1.1 Создание вектора</h5> 
        Вектор может быть строкой (горизонтальным вектором) или столбцом (вертикальным вектором).
        <li> <h5>Строка (горизонтальный вектор):</h5> 
            v = [1, 2, 3, 4, 5];  % Вектор-строка с названием v и с элементами от 1 до 5</li>

       <li> <h5>Столбец (вертикальный вектор): </h5> 
        v = [1; 2; 3; 4; 5];  % Вектор-столбец с элементами от 1 до 5</li>
       <li> <h5>Линейный вектор с шагом:</h5>
         v = 1:2:9;  % Вектор-строка с шагом 2: [1 3 5 7 9] </li>
       <li> <h5>Логарифмический вектор (линейная сетка):</h5>  v = linspace(0, 1, 5);  % Вектор с 5 элементами от 0 до 1: [0 0.25 0.5 0.75 1] </li>
    </ul>

    <ul class="simple">
        <h5>1.2. Создание матрицы</h5> 
        <p>Матрица задается в виде элементов, заключенных в квадратные скобки, разделенных пробелами или запятыми по строкам, и точками с запятой — по столбцам.</p>
        
        <li>Пример 2x3 матрицы: A = [1, 2, 3; 4, 5, 6]; </li>
        <li> Создание нулевой, единичной или случайной матрицы: A = zeros(3, 3);
        </li>
        <li> Единичная матрица размером 4x4: A = eye(4);
        </li>
        <li> Матрица с случайными элементами размером 3x2: A = rand(3, 2);  % Случайные числа от 0 до 1
        </li>
        <li>Матрицы с диапазонами: A = [1:3; 4:6; 7:9];
        </li>
        <li>Матрицу можно свести к нулевой размерности, используя выражение вида:
            Имя_матрицы = [].
            при этом имя матрицы сохраняется, и в дальнейшем ее можно расширить и использовать.</li>
            <li>Уничтожение матрицы осуществляется с помощью команды:
                clear Имя_матрицы.</li>
    </ul>
 

   <ul class="simple">
<h5> 1.3. функции для создания матрицы</h5>
     Вы также можете создать функцию, которая генерирует матрицы в зависимости от параметров:
     <li>Пример функции для создания матрицы</li>

     <li> <p>function matrix = create_matrix(rows, cols)</p>
      <p>   % Функция для создания матрицы размером rows x cols</p>
      <p>matrix = randi(10, rows, cols); % Генерация случайной матрицы с элементами от 1 до 10</p>

     <li><p>function  matrix=create_matrix(x1, x2)</p>
      <p> matrix=zeros(x1,x2);</p>
     <p>  for i=1:x1</p>
    <p>for j=1:x2</p>
              matrix(i,j)=i+j;
          end
      end  
      end</li> 
   
      
  end
  </li>

  <li>Использование функции: % Генерация матрицы 4x5
    generated_matrix = create_matrix(4, 5);
    disp('Сгенерированная матрица 4x5:');
    disp(generated_matrix);
    </li>
   </ul>
    
<ul class="simple"> <h5>1.4. Многомерные матрицы в MATLAB</h5>
  <p>Многомерные матрицы в MATLAB — это массивы, имеющие более двух измерений. 
    В отличие от обычных матриц (2D), многомерные массивы могут иметь три, четыре и больше измерений. 
    MATLAB поддерживает работу с многомерными матрицами так же, как и с обычными матрицами.</p> 
    <li> Создание многомерной матрицы 
      <p>Многомерную матрицу можно создать несколькими способами:

        Пример 1: Использование функции zeros, ones, rand
        Эти функции могут создавать многомерные массивы.</p>
    </li>
    <li>% Создание 3x3x3 матрицы, заполненной нулями
      A = zeros(3, 3, 3);
      
      % Создание 4x2x5 матрицы, заполненной единицами
      B = ones(4, 2, 5);
      
      % Создание 2x3x4 матрицы с случайными числами от 0 до 1
      C = rand(2, 3, 4);
      </li>
      <li>Ручное создание многомерной матрицы</li>
      <p>Можно вручную задать элементы для каждого измерения:</p>
      <p>% Создание 3D матрицы (2x2x2)
        D(:,:,1) = [1, 2; 3, 4];  % Первый срез
        D(:,:,2) = [5, 6; 7, 8];  % Второй срез
        
        disp(D);
        </p>
  </ul>

 <ul class="simple">
  <h5> 2. Возможны следующие операции с векторами и матрицами</h5>
  В MATLAB возможны следующие операции с векторами и матрицами:
    <li>+ – сложение;</li>
    <li> – – вычитание;</li>
    <li>* – умножение;</li>

   <li>/ – оператор деления. Если оба операнда - скаляры, то результат - частное от деления скаляр на скаляр. Если первый операнд матрица, а второй скаляр, то результат будет матрица, в которой каждый элемент - частное от деление на скаляр. 
    Если оба операнда квадратные матрицы одного ранга, то результат будет - произведение матрицы первого операнда на матрицу, обратную матрице-второму операнду.</li>
    <li>\ - оператор левостороннего деления. Операндами являются квадратные матрицы одного ранга. 
        Результатом является матрица, равная матрицы, обратной к первому операнду-матрице, на второй операнд-матрицу.</li>
    
    <li> ' – транспонирование;</li>
    <li>  ^ – возведение в степень;</li>
   <li> inv(m) – вычисление обратной матрицы m;</li>
  
   <li>pinv(m) – псевдообращение матрицы m;</li>
   <li>sqrtm(m) – матричный квадратный корень;</li>
    
    <li>poly(m) – вектор с коэффициентами характеристического многочлена матрицы;</li>
    <li>det(m) – значение определителя матрицы m;</li>
    <li> trace(m) – след матрицы m;</li>
    <li>  rank(m) – ранг матрицы m.</li>
</ul>
<ul class="simple">
  <h5>Ряд функций, предназначенных для обработки данных, заданных в матричной или векторной форме в Matlab</h5>
<li>Функция size(m) служит для определения числа строк и столбцов матрицы m. Она возвращает вектор [n, p], содержащий эти данные.</li>
<li>
  Функция max(v) возвращает значение максимального по значению элемента вектора v. Если ее аргументом является матрица, 
  например, max(m), то функция возвращает вектор-строку, содержащий значения максимальных элементов каждого из столбцов.
  Аналогично действует функция min(m), выделяющая элементы с минимальными значениями.
</li>
<li>Функция mean(v) возвращает среднее значение элементов вектора v, а функция mean(m) с матричным аргументом возвращает вектор-строку средних значений каждого из столбцов данных.</li>
    
    <li>Функция std(v) возвращает статистический параметр – стандартное (квадратичное) отклонение для одномерного массива данных, представленного вектором v.
      Для матричного аргумента эта функция возвращает вектор-строку стандартных отклонений для каждого из столбцов.</li>
      <li> Функция сортировки sort(v) возвращает вектор, элементы которого расположены в порядке роста их значений. Для матричного аргумента эта функция возвращает матрицу,
        у которой отсортированы элементы каждого столбца.</li>
        <li>Функция sum(v) возвращает сумму элементов вектора v, а для матричного аргумента функция sum(m) возвращает вектор-строку сумм элементов по каждому из столбцов.</li>
        <li>Аналогично функция prod(m) возвращает вектор произведений элементов каждого из столбцов.</li>
    
</ul>
<li>Порядок выполнения лабораторной работы</li>
       
 <ul class="simple"><h5>Содержание отчета</h5> 
<li>1. Титульный лист</li>
<li>1. Цель работы.</li>
<li>2. Результаты пунктов 2.2.1-2.2.3.</li>
<li>3. Выводы.</li>
</ul>
<ul class="simple"> Контрольные вопросы
<li>1. Как осуществляется ввод вектора-строки?</li>
<li>2. Как осуществляется ввод вектора-столбца?</li>
<li>3. Как определяется число строк и столбцов матрицы?</li>
<li>4. Какие операции служат для определения max-го и min-го элемента матрицы?</li>
<li>5. Как осуществляется суммирование и умножение элементов матрицы?</li>
</ul>
</ul>
</div>
`}